



   


              
        

   


        
            
    
    
        
            
    
                                        
               
               

               
               

      
                  
   

                                   
               
               

               
               

      
                  
   

                                   
               
               

               
               

      
                  
   

                        
                                             

         


   


              
        

   


        
            
    
    
        
            
    
                                        
               
               

               
               

      
                  
   

                                   
               
               

               
               

      
                  
   

                                   
               
               

               
               

      
                  
   

                        
                                             

         

    #include <stdio.h> 

#define N(a)       "%"#a"$hhn"
#define O(a,b)     "%10$"#a"d"N(b)
#define U          "%10$.*37$d"
#define G(a)       "%"#a"$s"
#define H(a,b)     G(a)G(b)
#define T(a)       a a 
#define s(a)       T(a)T(a)
#define A(a)       s(a)T(a)a
#define n(a)       A(a)a
#define D(a)       n(a)A(a)
#define C(a)       D(a)a
#define R          C(C(N(12)G(12)))
#define o(a,b,c)   C(H(a,a))D(G(a))C(H(b,b)G(b))n(G(b))O(32,c)R
#define SS         O(78,55)R "\n\033[2J\n%26$s";
#define E(a,b,c,d) H(a,b)G(c)O(253,11)R G(11)O(255,11)R H(11,d)N(d)O(253,35)R
#define S(a,b)     O(254,11)H(a,b)N(68)R G(68)O(255,68)N(12)H(12,68)G(67)N(67)

-"end of parsed text."-char* fmt = O(10,39)N(40)N(41)N(42)N(43)N(66)N(69)N(24)O(22,65)O(5,70)O(8,44)N(
            45)N(46)N    (47)N(48)N(    49)N( 50)N(     51)N(52)N(53    )O( 28,
            54)O(5,        55) O(2,    56)O(3,57)O(      4,58 )O(13,    73)O(4,
            71 )N(   72)O   (20,59    )N(60)N(61)N(       62)N (63)N    (64)R R
            E(1,2,   3,13   )E(4,    5,6,13)E(7,8,9        ,13)E(1,4    ,7,13)E
            (2,5,8,        13)E(    3,6,9,13)E(1,5,         9,13)E(3    ,5,7,13
            )E(14,15,    16,23)    E(17,18,19,23)E(          20, 21,    22,23)E
            (14,17,20,23)E(15,    18,21,23)E(16,19,    22     ,23)E(    14, 18,
            22,23)E(16,18,20,    23)R U O(255 ,38)R    G (     38)O(    255,36)
            R H(13,23)O(255,    11)R H(11,36) O(254    ,36)     R G(    36 ) O(
            255,36)R S(1,14    )S(2,15)S(3, 16)S(4,    17 )S     (5,    18)S(6,
            19)S(7,20)S(8,    21)S(9    ,22)H(13,23    )H(36,     67    )N(11)R
            G(11)""O(255,    25 )R        s(C(G(11)    ))n (G(          11) )G(
            11)N(54)R C(    "aa")   s(A(   G(25)))T    (G(25))N         (69)R o
            (14,1,26)o(    15, 2,   27)o   (16,3,28    )o( 17,4,        29)o(18
            ,5,30)o(19    ,6,31)o(        20,7,32)o    (21,8,33)o       (22 ,9,
            34)n(C(U)    )N( 68)R H(    36,13)G(23)    N(11)R C(D(      G(11)))
            D(G(11))G(68)N(68)R G(68)O(49,35)R H(13,23)G(67)N(11)R C(H(11,11)G(
            11))A(G(11))C(H(36,36)G(36))s(G(36))O(32,58)R C(D(G(36)))A(G(36))SS

#define arg d+6,d+8,d+10,d+12,d+14,d+16,d+18,d+20,d+22,0,d+46,d+52,d+48,d+24,d\
            +26,d+28,d+30,d+32,d+34,d+36,d+38,d+40,d+50,(scanf(d+126,d+4),d+(6\
            -2)+18*(1-d[2]%2)+d[4]*2),d,d+66,d+68,d+70, d+78,d+80,d+82,d+90,d+\
            92,d+94,d+97,d+54,d[2],d+2,d+71,d+77,d+83,d+89,d+95,d+72,d+73,d+74\
            ,d+75,d+76,d+84,d+85,d+86,d+87,d+88,d+100,d+101,d+96,d+102,d+99,d+\
            67,d+69,d+79,d+81,d+91,d+93,d+98,d+103,d+58,d+60,d+98,d+126,d+127,\
            d+128,d+129

char d[538] = {1,0,10,0,10};

int main() {
    while(*d) printf(fmt, arg);
}

#include "cells.h"
#include "cells_render.h"
#include "stdio.h"

int cellCount;
int cellGridW, cellGridH;

CellLive *cellLife;

static CellLive *cellNeighborAvg;


float cell_bestAvg;

float cell_best_range;




float cellDieSpeed;


float cell_minLife;

float cellLifeBoost;
int cell_diagNeighbors;

void cells_alloc(int a_cellGridW, int a_cellGridH)
{
    
    cellGridW = a_cellGridW;
	cellGridH = a_cellGridH;
    cellCount = cellGridW * cellGridH;

    
    cellLife = malloc(cellCount * sizeof(*cellLife));
	cellNeighborAvg = malloc(cellCount * sizeof(*cellNeighborAvg));

    
    memset(cellLife, 0, cellCount * sizeof(*cellLife));
    memset(cellNeighborAvg, 0, cellCount * sizeof(*cellNeighborAvg));
}

void cells_realloc(int a_cellGridW, int a_cellGridH)
{
    
    cellGridW = a_cellGridW;
    cellGridH = a_cellGridH;
    cellCount = cellGridW * cellGridH;

    
	cellLife = realloc(cellLife, cellCount * sizeof(*cellLife));
	cellNeighborAvg = realloc(cellNeighborAvg, cellCount * sizeof(*cellNeighborAvg));

    
    memset(cellLife, 0, cellCount * sizeof(*cellLife));
    memset(cellNeighborAvg, 0, cellCount * sizeof(*cellNeighborAvg));
}

void cells_dealloc()
{
    cells_realloc(0, 0);
}

void cells_clean()
{
    int cellI;

    for (cellI = 0; cellI < cellCount; ++cellI)
        cellLife[cellI] = 0;
}

void cells_gen(unsigned seed, int full)
{
    srand(seed);
    int xOff;
    int yOff;
    int genW;
    int genH;
    int x, y;
	int genMode = rand() % 7;
	
	if (full)
	{
		xOff = yOff = 0;
		genW = cellGridW;
		genH = cellGridH;
	}
	else
	{
		do
		{
			xOff = rand() % cellGridW;
			yOff = rand() % cellGridH;
			genW = rand() % (cellGridW - xOff);
			genH = rand() % (cellGridH - yOff);
		}
		while (genW * genH < 16);	
	}
	
#warning genMode automatically set to zero for debugging
	switch(genMode = 0)
	{
		case 0:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = rand() % 2;
				break;
		case 1:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = (x * y) % 2;
			break;
		case 2:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = (x + y) % 2;
			break;
		case 3:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = (x * y + x + y) % 2;
				break;
		case 4:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = (x * y * y) % 2;
			break;
		case 5:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = 0;
				break;
		case 6:
			for (x = 0; x < genW; ++x)
				for (y = 0; y < genH; ++y)
					cellLife[cell_index(xOff + x, yOff + y)] = 1;
				break;
		default:
			fprintf(stderr, "Internal generation error (invalid mode '%i')\n", genMode);
			exit(EXIT_FAILURE);
			break;
	}
}

void cells_logic_set(float a_bestAvg, float a_best_range, float a_cellDieSpeed, float a_minLife, float a_cellLifeBoost, int a_diagNeighbors)
{	
	cell_bestAvg = a_bestAvg;
	cell_best_range = a_best_range;
	cellDieSpeed = a_cellDieSpeed;
	cell_minLife = a_minLife;
	cellLifeBoost = a_cellLifeBoost;
	cell_diagNeighbors = a_diagNeighbors;
}

void cells_logic_rand(unsigned seed)
{
	srand(seed);
	
	cells_logic_set(
		rand() % 10000 / 10000., 
		rand() % 10000 / 10000., 
		rand() % 20000 / 10000. - 1, 
		rand() % 10000 / 10000., 
		rand() % 20000 / 20000. - .5, 
		rand() % 2);
}

void cells_logic_save(char const *filename)
{
	FILE *file = fopen(filename, "w");
	fprintf(file, "best_avg: %g\nbest_range: %g\ndie_speed: %g\nmin_life: %g\nlife_boost: %g\ndiagonal_neighbors: %i", 
			cell_bestAvg, cell_best_range, cellDieSpeed, cell_minLife, cellLifeBoost, cell_diagNeighbors);
	fclose(file);
}

void cells_logic_load(char const *filename)
{
	FILE *file = fopen(filename, "r");
	if (file)
	{
		int num = fscanf(file, "best_avg: %g best_range: %g die_speed: %g min_life: %g life_boost: %g diagonal_neighbors: %i", 
					 &cell_bestAvg, &cell_best_range, &cellDieSpeed, &cell_minLife, &cellLifeBoost, &cell_diagNeighbors);
		fclose(file);
		
		if (num != 5)
			fprintf(stderr, "Failed to data from %s\n", filename);	
	}
	else
		fprintf(stderr, "Failed to open '%s'\n", filename);	
}

void cells_logic()
{
    int i, x, y;

    
    
    i = 0;
    for (x = 0; x < cellGridW; ++x)
        for (y = 0; y < cellGridH; ++y)
        {
            cellNeighborAvg[i] = 0;

            if (x == 0 || x == cellGridW-1 || y == 0 || y == cellGridH-1)
            {
                
                int isXPOff = x + 1 == cellGridW;
				int isXMOff = x - 1 == -1;
				int isYPOff = y + 1 == cellGridH;
				int isYMOff = y - 1 == - 1;
                
                if (isXPOff) 
					cellNeighborAvg[i]+= cellLife[cell_index(0, y)];
				else
					cellNeighborAvg[i]+= cellLife[i + cellGridH];
				
				if (isXMOff) 
					cellNeighborAvg[i]+= cellLife[cell_index(cellGridW - 1, y)];
				else
					cellNeighborAvg[i]+= cellLife[i - cellGridH];
				
				if (isYPOff) 
					cellNeighborAvg[i]+= cellLife[cell_index(x, 0)];
				else
					cellNeighborAvg[i]+= cellLife[i + 1];
				
				if (isYMOff) 
					cellNeighborAvg[i]+= cellLife[cell_index(x, cellGridH - 1)];
				else
					cellNeighborAvg[i]+= cellLife[i - 1];
				
                if (cell_diagNeighbors)
                {
					
					if (isXPOff && isYPOff) 
						cellNeighborAvg[i]+= cellLife[cell_index(0, 0)];
					else if (isXPOff)
						cellNeighborAvg[i]+= cellLife[cell_index(0, y + 1)];
					else if (isYPOff)
						cellNeighborAvg[i]+= cellLife[cell_index(x + 1, 0)];
					else
						cellNeighborAvg[i]+= cellLife[cell_index(x + 1, y + 1)];
					
					if (isXPOff && isYMOff) 
						cellNeighborAvg[i]+= cellLife[cell_index(0, cellGridH - 1)];
					else if (isXPOff)
						cellNeighborAvg[i]+= cellLife[cell_index(0, y - 1)];
					else if (isYMOff)
						cellNeighborAvg[i]+= cellLife[cell_index(x + 1, cellGridH - 1)];
					else
						cellNeighborAvg[i]+= cellLife[cell_index(x + 1, y - 1)];
					
					if (isXMOff && isYPOff) 
						cellNeighborAvg[i]+= cellLife[cell_index(cellGridW - 1, 0)];
					else if (isXMOff)
						cellNeighborAvg[i]+= cellLife[cell_index(cellGridW - 1, y + 1)];
					else if (isYPOff)
						cellNeighborAvg[i]+= cellLife[cell_index(x - 1, 0)];
					else
						cellNeighborAvg[i]+= cellLife[cell_index(x - 1, y + 1)];
					
					if (isXMOff && isYMOff) 
						cellNeighborAvg[i]+= cellLife[cell_index(cellGridW - 1, cellGridH - 1)];
					else if (isXMOff)
						cellNeighborAvg[i]+= cellLife[cell_index(cellGridW - 1, y - 1)];
					else if (isYMOff)
						cellNeighborAvg[i]+= cellLife[cell_index(x - 1, cellGridH - 1)];
					else
						cellNeighborAvg[i]+= cellLife[cell_index(x - 1, y - 1)];
                }
            }
            else
            {
                cellNeighborAvg[i]+= cellLife[i + 1];
                cellNeighborAvg[i]+= cellLife[i - 1];
                cellNeighborAvg[i]+= cellLife[i + cellGridH];
                cellNeighborAvg[i]+= cellLife[i - cellGridH];
                if (cell_diagNeighbors)
                {
                    cellNeighborAvg[i]+= cellLife[i + cellGridH + 1];
                    cellNeighborAvg[i]+= cellLife[i + cellGridH - 1];
                    cellNeighborAvg[i]+= cellLife[i - cellGridH + 1];
                    cellNeighborAvg[i]+= cellLife[i - cellGridH - 1];
                }
            }

			
			
			cellNeighborAvg[i]/= (cell_diagNeighbors ? 8 : 4);
            ++i;
        }

    i = 0;
    for (x = 0; x < cellGridW; ++x)
        for (y = 0; y < cellGridH; ++y)
        {
			float diffToBest = fabs(cell_bestAvg - cellNeighborAvg[i]);
			cellLife[i]-= cellDieSpeed * (diffToBest - cell_best_range);
			cellLife[i]+= cellLifeBoost;
			if (cellLife[i] < cell_minLife)
				cellLife[i] = 0;
            ++i;
        }
}

